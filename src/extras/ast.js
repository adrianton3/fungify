// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  var buildAst, mapping, nodes, raise, register, registerBinary,
    slice = [].slice;

  nodes = fungify.nodes;

  raise = function(coords, message) {
    var error;
    error = new Error(message);
    error.coords = coords;
    throw error;
  };

  mapping = new Map;

  register = Map.prototype.set.bind(mapping);

  register('not', function(e) {
    return nodes.makeUnary(buildAst(e));
  });

  register('print-char', function(e) {
    return nodes.makeSub('print-char', buildAst(e));
  });

  register('print-int', function(e) {
    return nodes.makeSub('print-int', buildAst(e));
  });

  registerBinary = function(name, encoded, constructor) {
    return register(name, function(e1, e2) {
      return constructor(encoded, buildAst(e1), buildAst(e2));
    });
  };

  registerBinary('+', '+', nodes.makeBinary);

  registerBinary('-', '-', nodes.makeBinary);

  registerBinary('*', '*', nodes.makeBinary);

  registerBinary('/', '/', nodes.makeBinary);

  registerBinary('%', '%', nodes.makeBinary);

  registerBinary('<', '`', nodes.makeBinary);

  register('while', function(test, body) {
    return nodes.makeWhile(buildAst(test), buildAst(body));
  });

  register('if', function(test, consequent, alternate) {
    return nodes.makeIf(buildAst(test), buildAst(consequent), buildAst(alternate));
  });

  (function() {
    var doHandler;
    doHandler = function() {
      var statements;
      statements = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return nodes.makeBlock(statements.map(buildAst));
    };
    doHandler.anyArity = true;
    return register('do', doHandler);
  })();

  register('set!', function(name, expression) {
    return nodes.makeAssignment(name.token.value, buildAst(expression));
  });

  buildAst = function(tree) {
    var args, form, handler, name, ref, ref1, type, value;
    ref = tree.token, type = ref.type, value = ref.value;
    if (type === 'number') {
      return nodes.makeNumber(value);
    } else if (type === 'identifier') {
      return nodes.makeVar(value);
    } else if (type === '(') {
      ref1 = tree.children, form = ref1[0], args = 2 <= ref1.length ? slice.call(ref1, 1) : [];
      name = form.token.value;
      if (!mapping.has(name)) {
        raise(form.token.coords, "Unrecognised form: " + name);
      }
      handler = mapping.get(name);
      if (!handler.anyArity && handler.length !== args.length) {
        raise(form.token.coords, name + " takes " + handler.length + " arguments\nbut was given " + args.length + " arguments");
      }
      return handler.apply(null, args);
    }
  };

  if (window.fungify == null) {
    window.fungify = {};
  }

  Object.assign(window.fungify, {
    buildAst: buildAst
  });

}).call(this);
