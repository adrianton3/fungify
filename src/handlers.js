// Generated by CoffeeScript 1.12.3
(function() {
  var assignmentHandler, binaryHandler, blockHandler, handlers, ifHandler, numberHandler, subHandler, unaryHandler, varHandler, whileHandler;

  ifHandler = function(recurse, node, place, resolve, line, column) {
    var alternate, alternateLoc, consequent, consequentLoc, jointLine, test, testLoc;
    test = node.test, consequent = node.consequent, alternate = node.alternate;
    testLoc = recurse(test, line, column);
    place(testLoc.line + 0, column, '#');
    place(testLoc.line + 1, column, '>');
    place(testLoc.line + 2, column, '|');
    consequentLoc = recurse(consequent, testLoc.line + 3, column);
    place(testLoc.line + 1, consequentLoc.column, 'v');
    alternateLoc = recurse(alternate, testLoc.line + 3, consequentLoc.column);
    jointLine = Math.max(consequentLoc.line, alternateLoc.line);
    place(jointLine, column, 'v');
    place(jointLine, consequentLoc.column, '<');
    return {
      line: jointLine + 1,
      column: alternateLoc.column
    };
  };

  whileHandler = function(recurse, node, place, resolve, line, column) {
    var body, bodyLoc, jointColumn, test, test1Loc, test2Loc;
    test = node.test, body = node.body;
    test1Loc = recurse(test, line, column);
    place(test1Loc.line + 0, column, '#');
    place(test1Loc.line + 1, column, '>');
    place(test1Loc.line + 3, column, '|');
    bodyLoc = recurse(body, test1Loc.line + 4, column);
    jointColumn = Math.max(test1Loc.column, bodyLoc.column);
    place(test1Loc.line + 1, jointColumn, 'v');
    place(test1Loc.line + 2, jointColumn, '#');
    place(test1Loc.line + 3, jointColumn, '<');
    test2Loc = recurse(test, bodyLoc.line, column);
    place(test2Loc.line + 0, column, '>');
    place(test2Loc.line + 1, column, 'v');
    place(test2Loc.line - 1, jointColumn, '#');
    place(test2Loc.line + 0, jointColumn, '^');
    place(test2Loc.line + 1, jointColumn, '<');
    return {
      line: test2Loc.line + 2,
      column: jointColumn + 1
    };
  };

  varHandler = function(recurse, node, place, resolve, line, column) {
    var address, name;
    name = node.name;
    address = resolve(name);
    place(line + 0, column, String(address));
    place(line + 1, column, '0');
    place(line + 2, column, 'g');
    return {
      line: line + 3,
      column: column + 1
    };
  };

  numberHandler = function(recurse, node, place, resolve, line, column) {
    var currentLine, digits, i, index, ref, value;
    value = node.value;
    digits = Array.from(value.toString(9));
    currentLine = line;
    place(currentLine, column, String(digits[0]));
    currentLine++;
    for (index = i = 1, ref = digits.length; 1 <= ref ? i < ref : i > ref; index = 1 <= ref ? ++i : --i) {
      place(currentLine + 0, column, '9');
      place(currentLine + 1, column, '*');
      place(currentLine + 2, column, String(digits[index]));
      place(currentLine + 3, column, '+');
      currentLine += 4;
    }
    return {
      line: currentLine,
      column: column + 1
    };
  };

  unaryHandler = function(recurse, node, place, resolve, line, column) {
    var expression, expressionLoc, operator;
    operator = node.operator, expression = node.expression;
    expressionLoc = recurse(expression, line, column);
    place(expressionLoc.line, column, operator);
    return {
      line: expressionLoc.line + 1,
      column: expressionLoc.column
    };
  };

  binaryHandler = function(recurse, node, place, resolve, line, column) {
    var jointColumn, left, leftLoc, operator, right, rightLoc;
    left = node.left, operator = node.operator, right = node.right;
    leftLoc = recurse(left, line, column);
    rightLoc = recurse(right, leftLoc.line, column);
    place(rightLoc.line, column, operator);
    jointColumn = Math.max(leftLoc.column, rightLoc.column);
    return {
      line: rightLoc.line + 1,
      column: jointColumn
    };
  };

  blockHandler = function(recurse, node, place, resolve, line, column) {
    var blockLoc, statements;
    statements = node.statements;
    blockLoc = statements.reduce(function(arg, statement) {
      var currentLine, maxColumn, statementLoc;
      currentLine = arg.currentLine, maxColumn = arg.maxColumn;
      statementLoc = recurse(statement, currentLine, column);
      return {
        currentLine: statementLoc.line,
        maxColumn: Math.max(maxColumn, statementLoc.column)
      };
    }, {
      currentLine: line,
      maxColumn: 0
    });
    return {
      line: blockLoc.currentLine,
      column: blockLoc.maxColumn
    };
  };

  assignmentHandler = function(recurse, node, place, resolve, line, column) {
    var address, expression, expressionLoc, name;
    name = node.name, expression = node.expression;
    address = resolve(name);
    place(line + 0, column, String(address));
    place(line + 1, column, '0');
    expressionLoc = recurse(expression, line + 2, column);
    place(expressionLoc.line, column, 'p');
    return {
      line: expressionLoc.line + 1,
      column: expressionLoc.column
    };
  };

  subHandler = function(recurse, node, place, resolve, line, column) {
    var expression, expressionLoc, instruction, name;
    name = node.name, expression = node.expression;
    expressionLoc = recurse(expression, line, column);
    instruction = name === 'print-char' ? ',' : '.';
    place(expressionLoc.line, column, instruction);
    return {
      line: expressionLoc.line + 1,
      column: expressionLoc.column
    };
  };

  handlers = new Map([['block', blockHandler], ['if', ifHandler], ['while', whileHandler], ['assignment', assignmentHandler], ['unary', unaryHandler], ['binary', binaryHandler], ['number', numberHandler], ['var', varHandler], ['sub', subHandler]]);

  if (window.fungify == null) {
    window.fungify = {};
  }

  Object.assign(fungify, {
    handlers: handlers
  });

}).call(this);
